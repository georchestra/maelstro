
volumes:
  postgresql_data:
  ldap_data:
  ldap_config:
  geoserver_geodata:
  geoserver_datadir:
  geoserver_tiles:
  geoserver_native_libs:
  geonetwork_datadir:
  esdata:
  georchestra_datadir:
  datafeeder_postgis_data:

secrets:
  slapd_password:
    file: ./secrets/slapd_password.txt
  geoserver_privileged_user_passwd:
    file: ./secrets/geoserver_privileged_user_passwd.txt

services:
  copy-datadir:
    image: alpine
    command: sh -c "rm -r /etc/georchestra/* ; cp -r -f -v /mnt/datadir/* /etc/georchestra/ ; chmod 777 -R -v /etc/georchestra/" # "sleep 6000"
    volumes:
      - ./config:/mnt/datadir
      - georchestra_datadir:/etc/georchestra

  envsubst:
    image: georchestra/k8s-initcontainer-envsubst
    depends_on:
      copy-datadir:
        condition: service_completed_successfully
    environment:
      - DEBUG=yes
      - SUBST_FILES=/etc/georchestra/security-proxy/targets-mapping.properties /etc/georchestra/datafeeder/frontend-config.json /etc/georchestra/datafeeder/metadata_* /etc/georchestra/geonetwork/microservices/ogc-api-records/config.yml
    env_file:
      - .envs-common
      - .envs-hosts
    volumes:
      - georchestra_datadir:/etc/georchestra

  database:
    image: georchestra/database:24.0.x
    env_file:
      - .envs-database-georchestra
    depends_on:
      envsubst:
        condition: service_completed_successfully
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: always

  ldap:
    image: georchestra/ldap:24.0.x
    depends_on:
      envsubst:
        condition: service_completed_successfully
    secrets:
      - slapd_password
      - geoserver_privileged_user_passwd
    environment:
      - SLAPD_ORGANISATION=georchestra
      - SLAPD_DOMAIN=georchestra.org
      - SLAPD_PASSWORD_FILE=/run/secrets/slapd_password
      - SLAPD_PASSWORD=
      - GEOSERVER_PRIVILEGED_USER_PASSWORD_FILE=/run/secrets/geoserver_privileged_user_passwd
      - SLAPD_LOG_LEVEL=32768 # See https://www.openldap.org/doc/admin24/slapdconfig.html#loglevel%20%3Clevel%3E
      - RUN_AS_UID=0
      - RUN_AS_GID=0
      - LDAPHOST=localhost
    env_file:
      - .envs-ldap
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap
    restart: always

  gateway:
    image: georchestra/gateway:1.1.x
    depends_on:
      - database
    volumes:
      - georchestra_datadir:/etc/georchestra
    environment:
      - JAVA_TOOL_OPTIONS=-Dgeorchestra.datadir=/etc/georchestra
    env_file:
      - .envs-common
      - .envs-ldap
      - .envs-hosts
      - .envs-database-georchestra

  geoserver:
    image: georchestra/geoserver:24.0.x
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:8080/geoserver/gwc/service/wmts?SERVICE=WMTS&REQUEST=GetCapabilities >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - georchestra_datadir:/etc/georchestra
      - geoserver_datadir:/mnt/geoserver_datadir
      - geoserver_geodata:/mnt/geoserver_geodata
      - geoserver_tiles:/mnt/geoserver_tiles
      - geoserver_native_libs:/mnt/geoserver_native_libs
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=8G

    env_file:
      - .envs-database-georchestra
      - .envs-database-datafeeder
    restart: always

  console:
    image: georchestra/console:24.0.x
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:8080/console/account/new >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - georchestra_datadir:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=1G
    env_file:
      - .envs-common
      - .envs-ldap
      - .envs-database-georchestra
      - .envs-hosts
    restart: always

  geonetwork:
    image: georchestra/geonetwork:24.0.x
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:8080/geonetwork/srv/eng/catalog.search >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      console:
        condition: service_healthy
      database:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - georchestra_datadir:/etc/georchestra
      - geonetwork_datadir:/mnt/geonetwork_datadir
    environment:
      - JAVA_OPTIONS=-Duser.home=/tmp/jetty -Dgeorchestra.datadir=/etc/georchestra -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005 -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=6G
    env_file:
      - .envs-hosts
      - .envs-database-georchestra
    restart: always

  postgis:
    # used by datafeeder to ingest uploaded user datasets into
    image: postgis/postgis:13-3.1-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 3
    depends_on:
      envsubst:
        condition: service_completed_successfully
    env_file:
      - .envs-database-datafeeder
    volumes:
      - datafeeder_postgis_data:/var/lib/postgresql/data
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.21
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cat/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      envsubst:
        condition: service_completed_successfully
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    restart: always
